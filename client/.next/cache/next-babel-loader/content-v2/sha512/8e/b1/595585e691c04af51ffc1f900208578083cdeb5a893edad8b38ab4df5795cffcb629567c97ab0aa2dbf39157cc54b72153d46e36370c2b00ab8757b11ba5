{"ast":null,"code":"import _defineProperty from \"/Users/rjb/Desktop/code/projects/rfp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var addItem = function addItem(item, next) {\n  var cart = [];\n\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\")); // cart = JSON.stringify(localStorage.getItem('cart'))\n    }\n\n    console.log(item);\n    cart.push(_objectSpread(_objectSpread({}, item), {}, {\n      count: 1\n    })); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(function (p) {\n      return p._id;\n    }))).map(function (id) {\n      return cart.find(function (p) {\n        return p._id === id;\n      });\n    });\n    console.log(cart);\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  next();\n};\nexport var itemTotal = function itemTotal() {\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\")).length;\n    }\n  }\n\n  return 0;\n};\nexport var getCart = function getCart() {\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\"));\n    }\n  }\n\n  return [];\n};\nexport var updateItem = function updateItem(productId, count) {\n  var cart = [];\n\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map(function (product, i) {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n};\nexport var removeItem = function removeItem(productId) {\n  var cart = [];\n\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map(function (product, i) {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  return cart;\n};\nexport var emptyCart = function emptyCart(next) {\n  if (true) {\n    localStorage.removeItem(\"cart\");\n    next();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}