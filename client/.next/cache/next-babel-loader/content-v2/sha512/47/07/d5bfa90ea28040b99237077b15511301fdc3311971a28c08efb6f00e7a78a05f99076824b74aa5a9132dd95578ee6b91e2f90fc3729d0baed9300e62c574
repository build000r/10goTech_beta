{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from \"react\";\nimport { Item, Button, Form, TextArea, Segment, Message } from \"semantic-ui-react\";\nimport Checkbox from \"../../components/user-site/Checkbox\";\nimport Link from \"next/link\";\n\nconst CheckoutCard = ({\n  product,\n  isAdmin\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    showAddToCartButton: true,\n    // depends if logged in\n    redirect: \"\",\n    clickOptionsSelected: [],\n    userMessage: \"\",\n    loading: false\n  });\n  const {\n    showAddToCartButton,\n    redirect,\n    selected,\n    userMessage,\n    loading\n  } = values;\n\n  const adminLinks = () => isAdmin ? /*#__PURE__*/_jsx(\"div\", {\n    children: /*#__PURE__*/_jsxs(Message, {\n      floating: true,\n      children: [/*#__PURE__*/_jsx(Message.Header, {\n        children: \"Only the site owner can see this.\"\n      }), /*#__PURE__*/_jsxs(Message.Content, {\n        children: [/*#__PURE__*/_jsx(Link, {\n          href: `/user/${product.site.title}/admin/${product.slug}`,\n          children: /*#__PURE__*/_jsx(Button, {\n            children: \"Edit/Delete Service\"\n          })\n        }), /*#__PURE__*/_jsx(Link, {\n          href: `/user/${product.site.title}/admin/${product.slug}/photo`,\n          children: /*#__PURE__*/_jsx(Button, {\n            children: \"Edit Photos\"\n          })\n        }), /*#__PURE__*/_jsx(Link, {\n          href: `/user/${product.site.title}/admin/${product.slug}/email`,\n          children: /*#__PURE__*/_jsx(Button, {\n            children: \"Edit Email\"\n          })\n        })]\n      })]\n    })\n  }) : null;\n\n  const addCartItemToLocalStorage = item => {\n    let cart = [];\n\n    if (true) {\n      return;\n    }\n\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.push({\n      item,\n      count: 1\n    }); // not removing duplicates\n\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  };\n\n  const showAddToCart = showAddToCartButton => {\n    return showAddToCartButton && /*#__PURE__*/_jsx(Link, {\n      href: `/user/${product.site.title}/cart`,\n      fluid: true,\n      children: /*#__PURE__*/_jsx(Button, {\n        fluid: true,\n        color: \"green\",\n        onClick: async () => {\n          product.clickOptionsSelected = values.clickOptionsSelected;\n          product.userMessage = values.userMessage;\n          console.log(\"product\", product);\n          addCartItemToLocalStorage(product);\n        },\n        children: \"Add to cart\"\n      })\n    });\n  };\n\n  const handleClickOptions = opts => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      clickOptionsSelected: opts\n    }));\n  };\n\n  const showCustomTextArea = () => /*#__PURE__*/_jsx(Form, {\n    children: /*#__PURE__*/_jsx(TextArea, {\n      placeholder: product.customerNote,\n      onChange: e => {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          userMessage: e.target.value\n        }));\n      },\n      className: \"form-control\",\n      value: userMessage\n    })\n  });\n\n  const checkoutCard = () => {\n    var _product$clickOptions;\n\n    return /*#__PURE__*/_jsxs(Item.Group, {\n      centered: true,\n      children: [adminLinks(), /*#__PURE__*/_jsx(Item, {\n        centered: true,\n        children: /*#__PURE__*/_jsxs(Item.Content, {\n          style: {\n            marginTop: \"1rem\"\n          },\n          children: [/*#__PURE__*/_jsx(Item.Description, {\n            style: {\n              marginBottom: \"3rem\"\n            },\n            children: product.description\n          }), /*#__PURE__*/_jsx(Item.Extra, {\n            fluid: true,\n            style: (_product$clickOptions = product.clickOptions[0]) !== null && _product$clickOptions !== void 0 && _product$clickOptions.name ? {} : {\n              display: \"none\"\n            },\n            children: Checkbox(product.clickOptions, handleClickOptions)\n          }), showCustomTextArea()]\n        })\n      }), /*#__PURE__*/_jsx(Item, {\n        children: /*#__PURE__*/_jsx(Item.Extra, {\n          fluid: true,\n          children: isAdmin ? /*#__PURE__*/_jsx(Button, {\n            active: false,\n            fluid: true,\n            color: \"green\",\n            children: \"Add to cart (disabled while administrator is logged in)\"\n          }) : showAddToCart(showAddToCartButton)\n        })\n      }), /*#__PURE__*/_jsx(\"br\", {})]\n    });\n  };\n\n  return checkoutCard();\n};\n\nexport default CheckoutCard;","map":null,"metadata":{},"sourceType":"module"}