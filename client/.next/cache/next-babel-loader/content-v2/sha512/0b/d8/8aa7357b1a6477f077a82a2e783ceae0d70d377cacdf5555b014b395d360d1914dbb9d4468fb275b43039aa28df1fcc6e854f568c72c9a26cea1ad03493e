{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { Item, Divider, Segment, Button, Header, Label, Card, Dropdown, Container } from \"semantic-ui-react\";\nimport { buildClient } from \"../../../../api/build-client\";\nimport { useMediaQuery } from \"../../../../hooks/use-media-query\";\nimport { useRequest } from \"../../../../hooks/use-request\";\nimport Router, { useRouter } from \"next/router\";\nimport Layout from \"../../../../components/layouts\";\n\nconst services = ({\n  serverOrders,\n  siteUsers\n}) => {\n  const {\n    0: orders,\n    1: setOrders\n  } = useState(serverOrders);\n  const {\n    0: statusFilter,\n    1: setStatusFilter\n  } = useState(\"\");\n  const {\n    0: statusMsg,\n    1: setStatusMsg\n  } = useState(\"\");\n  const {\n    0: sortNew,\n    1: setSortNew\n  } = useState(true);\n\n  if (orders && orders.length === 0) {\n    return /*#__PURE__*/_jsx(Container, {\n      style: {\n        minHeight: \"90vh\"\n      },\n      children: /*#__PURE__*/_jsx(Header, {\n        children: \"When you receive your first order, it will show up here.\"\n      })\n    });\n  }\n\n  const path = useRouter().asPath;\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    ownerNote: \"Order is currently being reviewed\",\n    crmStatus: \"\",\n    orderId: \"\",\n    loading: false\n  });\n  const {\n    ownerNote,\n    crmStatus,\n    orderId\n  } = values;\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: `/api/order`,\n    // MUST CHANGE\n    method: \"put\",\n    body: {\n      ownerNote,\n      crmStatus,\n      orderId\n    },\n    onSuccess: () => Router.push(path)\n  });\n  const options = [{\n    key: \"created\",\n    icon: \"edit\",\n    text: \"Created\",\n    value: \"created\"\n  }, {\n    key: \"following-up\",\n    icon: \"phone\",\n    text: \"Following up\",\n    value: \"following-up\"\n  }, {\n    key: \"closed-won\",\n    icon: \"check\",\n    text: \"Closed won\",\n    value: \"closed-won\"\n  }, {\n    key: \"closed-lost\",\n    icon: \"delete\",\n    text: \"Closed lost\",\n    value: \"closed-lost\"\n  }];\n\n  const handleChange = name => e => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: e.target.value\n    }));\n  };\n\n  const clickSubmit = async event => {\n    event.preventDefault(); // keep browser from reloading when btn click\n\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: true\n    }));\n    await doRequest();\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: false\n    }));\n  };\n\n  const updateOrderStatus = orderId => /*#__PURE__*/_jsxs(Button.Group, {\n    floated: \"right\",\n    color: \"teal\",\n    children: [/*#__PURE__*/_jsx(Button, {\n      onClick: clickSubmit,\n      children: \"Update Status\"\n    }), /*#__PURE__*/_jsx(Dropdown, {\n      onChange: e => {\n        return setValues(_objectSpread(_objectSpread({}, values), {}, {\n          crmStatus: options.filter(o => o.text === e.target.outerText)[0].key,\n          orderId\n        }));\n      },\n      className: \"button icon\",\n      floating: true,\n      options: options,\n      trigger: /*#__PURE__*/_jsx(_Fragment, {})\n    })]\n  }); // do request update status /api/order put\n\n\n  const filterByStatus = status => {\n    const ordersWithStatus = serverOrders.filter(o => o.crmStatus === status);\n    setStatusMsg(\"\");\n    ordersWithStatus.length > 0 ? setOrders(ordersWithStatus) : setStatusMsg(`There are no ${status} items`);\n  };\n\n  const sortByNew = bool => {\n    bool ? setOrders(orders.sort(function (a, b) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    })) : setOrders(orders.sort(function (b, a) {\n      return new Date(b.createdAt) - new Date(a.createdAt);\n    }));\n    setSortNew(bool);\n  };\n\n  const showProducts = products => {\n    return products.map(product => {\n      let {\n        brief,\n        clickOptionsSelected,\n        id,\n        site,\n        title,\n        userMessage\n      } = product;\n      return /*#__PURE__*/_jsxs(Item, {\n        children: [/*#__PURE__*/_jsx(Divider, {\n          horizontal: true,\n          children: \"Service Requested\"\n        }), \" \", /*#__PURE__*/_jsxs(Item.Content, {\n          children: [/*#__PURE__*/_jsx(Item.Header, {\n            as: \"h4\",\n            children: title\n          }), /*#__PURE__*/_jsx(Item.Meta, {\n            children: brief\n          }), clickOptionsSelected.map((o, i) => /*#__PURE__*/_jsxs(Item.Extra, {\n            children: [/*#__PURE__*/_jsx(\"i\", {\n              className: \"check icon\"\n            }), o.name]\n          }, i)), /*#__PURE__*/_jsxs(Item.Description, {\n            children: [\" \", /*#__PURE__*/_jsx(\"i\", {\n              className: \"sticky note outline icon\"\n            }), \" \", userMessage]\n          })]\n        })]\n      }, id);\n    });\n  };\n\n  const getOrderer = id => siteUsers.filter(u => u.id === id || u._id === id);\n\n  return /*#__PURE__*/_jsxs(Layout, {\n    smallLeaderboard: true,\n    leaderboardData: {\n      header: \"Order History\",\n      subHeader: \"Keep track of clients, and the status of their projects.\",\n      dividerText: \"Service Requests\"\n    },\n    children: [/*#__PURE__*/_jsx(Item, {\n      style: {\n        width: \"100%\",\n        marginBottom: \"30px\"\n      },\n      children: /*#__PURE__*/_jsxs(Item.Content, {\n        children: [/*#__PURE__*/_jsx(Item.Meta, {\n          children: statusMsg\n        }), /*#__PURE__*/_jsxs(Button.Group, {\n          fluid: true,\n          children: [/*#__PURE__*/_jsx(Button, {\n            onClick: () => filterByStatus(\"created\"),\n            children: \"New\"\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: () => filterByStatus(\"following-up\"),\n            children: \"Following-Up\"\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: () => filterByStatus(\"closed-won\"),\n            children: \"Won\"\n          }), /*#__PURE__*/_jsx(Button, {\n            onClick: () => filterByStatus(\"closed-lost\"),\n            children: \"Lost\"\n          })]\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Card.Group, {\n      centered: true,\n      itemsPerRow: useMediaQuery(1000) ? 1 : 3,\n      children: orders.map(order => {\n        let {\n          crmStatus,\n          userId,\n          products,\n          id\n        } = order;\n        let orderer;\n\n        if (id) {\n          orderer = getOrderer(userId)[0];\n        }\n\n        const {\n          name,\n          email,\n          phone,\n          createdAt\n        } = orderer;\n        return /*#__PURE__*/_jsxs(Card, {\n          children: [/*#__PURE__*/_jsxs(Card.Content, {\n            children: [/*#__PURE__*/_jsx(Card.Meta, {\n              children: /*#__PURE__*/_jsx(Header, {\n                as: \"h4\"\n              })\n            }), /*#__PURE__*/_jsx(Item, {\n              children: /*#__PURE__*/_jsxs(Item.Content, {\n                children: [/*#__PURE__*/_jsx(Divider, {\n                  horizontal: true,\n                  children: \"Customer info\"\n                }), /*#__PURE__*/_jsx(Item.Meta, {\n                  children: /*#__PURE__*/_jsx(\"span\", {\n                    children: name ? name : null\n                  })\n                }), /*#__PURE__*/_jsx(Item.Meta, {\n                  children: /*#__PURE__*/_jsx(\"span\", {\n                    children: email\n                  })\n                }), /*#__PURE__*/_jsx(Item.Meta, {\n                  children: /*#__PURE__*/_jsx(\"span\", {\n                    children: phone ? `Phone #: ${phone} ` : \"\"\n                  })\n                }), /*#__PURE__*/_jsx(Item.Description, {\n                  children: showProducts(products)\n                })]\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Card.Content, {\n            extra: true,\n            children: [updateOrderStatus(id), /*#__PURE__*/_jsx(Label, {\n              children: crmStatus\n            })]\n          })]\n        }, id);\n      })\n    })]\n  });\n};\n\nservices.getInitialProps = async context => {\n  let {\n    data: orders\n  } = await buildClient(context).get(`/api/orders/${context.query.site}`);\n  const {\n    data: siteUsers\n  } = await buildClient(context).get(`/api/users/by-site/${context.query.site}`);\n  let serverOrders = orders.sort(function (a, b) {\n    return new Date(b.createdAt) - new Date(a.createdAt);\n  });\n  return {\n    serverOrders,\n    siteUsers\n  };\n};\n\nexport default services;","map":null,"metadata":{},"sourceType":"module"}