{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from \"react\";\n\nvar useMediaQuery = function useMediaQuery(width) {\n  _s();\n\n  var _useState = useState(false),\n      targetReached = _useState[0],\n      setTargetReached = _useState[1];\n\n  var updateTarget = useCallback(function (e) {\n    if (e.matches) {\n      setTargetReached(true);\n    } else {\n      setTargetReached(false);\n    }\n  }, []);\n  useEffect(function () {\n    var media = window.matchMedia(\"(max-width: \".concat(width, \"px)\"));\n    media.addListener(updateTarget); // Check on mount (callback is not called until a change occurs)\n\n    if (media.matches) {\n      setTargetReached(true);\n    }\n\n    return function () {\n      return media.removeListener(updateTarget);\n    };\n  }, []);\n  return targetReached;\n};\n\n_s(useMediaQuery, \"3YJ+medpEEIXi9i+LP+brdzS5O0=\");\n\nexport { useMediaQuery };","map":{"version":3,"sources":["/Users/rjb/Desktop/code/projects/rfp/client/hooks/use-media-query.js"],"names":["useState","useCallback","useEffect","useMediaQuery","width","targetReached","setTargetReached","updateTarget","e","matches","media","window","matchMedia","addListener","removeListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACWJ,QAAQ,CAAC,KAAD,CADnB;AAAA,MACxBK,aADwB;AAAA,MACTC,gBADS;;AAG/B,MAAMC,YAAY,GAAGN,WAAW,CAAC,UAACO,CAAD,EAAO;AACtC,QAAIA,CAAC,CAACC,OAAN,EAAe;AACbH,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,KAFD,MAEO;AACLA,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,GAN+B,EAM7B,EAN6B,CAAhC;AAQAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,KAAK,GAAGC,MAAM,CAACC,UAAP,uBAAiCR,KAAjC,SAAd;AACAM,IAAAA,KAAK,CAACG,WAAN,CAAkBN,YAAlB,EAFc,CAId;;AACA,QAAIG,KAAK,CAACD,OAAV,EAAmB;AACjBH,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AAED,WAAO;AAAA,aAAMI,KAAK,CAACI,cAAN,CAAqBP,YAArB,CAAN;AAAA,KAAP;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAOF,aAAP;AACD,CAxBD;;GAAMF,a;;AA0BN,SAASA,aAAT","sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\n\nconst useMediaQuery = (width) => {\n  const [targetReached, setTargetReached] = useState(false);\n\n  const updateTarget = useCallback((e) => {\n    if (e.matches) {\n      setTargetReached(true);\n    } else {\n      setTargetReached(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    const media = window.matchMedia(`(max-width: ${width}px)`);\n    media.addListener(updateTarget);\n\n    // Check on mount (callback is not called until a change occurs)\n    if (media.matches) {\n      setTargetReached(true);\n    }\n\n    return () => media.removeListener(updateTarget);\n  }, []);\n\n  return targetReached;\n};\n\nexport { useMediaQuery };\n"]},"metadata":{},"sourceType":"module"}