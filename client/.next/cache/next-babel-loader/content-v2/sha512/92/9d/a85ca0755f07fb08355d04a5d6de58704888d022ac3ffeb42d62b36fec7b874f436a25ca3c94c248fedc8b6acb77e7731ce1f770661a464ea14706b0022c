{"ast":null,"code":"import _defineProperty from \"/Users/rjb/Desktop/code/projects/rfp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var addItem = function addItem(item, next) {\n  var cart = [];\n\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\")); // cart = JSON.stringify(localStorage.getItem('cart'))\n    }\n\n    console.log(item);\n    cart.push(_objectSpread(_objectSpread({}, item), {}, {\n      count: 1\n    })); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(function (p) {\n      return p._id;\n    }))).map(function (id) {\n      return cart.find(function (p) {\n        return p._id === id;\n      });\n    });\n    console.log(cart);\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  next();\n};\nexport var itemTotal = function itemTotal() {\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\")).length;\n    }\n  }\n\n  return 0;\n};\nexport var getCart = function getCart() {\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\"));\n    }\n  }\n\n  return [];\n};\nexport var updateItem = function updateItem(productId, count) {\n  var cart = [];\n\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map(function (product, i) {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n};\nexport var removeItem = function removeItem(productId) {\n  var cart = [];\n\n  if (true) {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map(function (product, i) {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n\n  return cart;\n};\nexport var emptyCart = function emptyCart(next) {\n  if (true) {\n    localStorage.removeItem(\"cart\");\n    next();\n  }\n};","map":{"version":3,"sources":["/Users/rjb/Desktop/code/projects/rfp/client/hooks/cart-helpers.js"],"names":["addItem","item","next","cart","localStorage","getItem","JSON","parse","console","log","push","count","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice","emptyCart"],"mappings":"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","sourcesContent":["export const addItem = (item, next) => {\n  let cart = [];\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n      // cart = JSON.stringify(localStorage.getItem('cart'))\n    }\n\n    console.log(item);\n\n    cart.push({\n      ...item,\n      count: 1,\n    });\n\n    // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map((p) => p._id))).map((id) => {\n      return cart.find((p) => p._id === id);\n    });\n\n    console.log(cart);\n\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n  next();\n};\n\nexport const itemTotal = () => {\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\")).length;\n    }\n  }\n  return 0;\n};\n\nexport const getCart = () => {\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      return JSON.parse(localStorage.getItem(\"cart\"));\n    }\n  }\n  return [];\n};\n\nexport const updateItem = (productId, count) => {\n  let cart = [];\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n};\n\nexport const removeItem = (productId) => {\n  let cart = [];\n  if (typeof window !== \"undefined\") {\n    if (localStorage.getItem(\"cart\")) {\n      cart = JSON.parse(localStorage.getItem(\"cart\"));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n\n    localStorage.setItem(\"cart\", JSON.stringify(cart));\n  }\n  return cart;\n};\n\nexport const emptyCart = (next) => {\n  if (typeof window !== \"undefined\") {\n    localStorage.removeItem(\"cart\");\n    next();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}