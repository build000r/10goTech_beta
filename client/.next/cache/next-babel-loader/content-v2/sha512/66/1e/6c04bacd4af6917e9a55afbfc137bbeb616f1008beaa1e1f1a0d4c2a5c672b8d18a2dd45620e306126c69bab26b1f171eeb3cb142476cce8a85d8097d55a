{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport { Card, Segment, Form, Input, TextArea, Button } from \"semantic-ui-react\";\nimport { useRequest } from \"../../hooks/use-request\";\nimport Router from \"next/router\";\nimport DeleteProduct from \"../admin-site/delete-product\";\n\nconst AddUpdateProduct = ({\n  product,\n  site\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    updateExisting: true,\n    productId: \"\",\n    title: \"\",\n    brief: \"\",\n    description: \"\",\n    homepagePosition: \"\",\n    clickOptions: [{\n      name: \"\"\n    }],\n    error: \"\",\n    loading: false,\n    createdProduct: \"\",\n    redirectToProfile: false,\n    emailSubject: \"\",\n    emailBody: \"\",\n    slug: \"\",\n    customerNote: \"\"\n  }); // on save create a slug.. lower case & dashes\n  // modify state for updating vs creating\n\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: !product ? `/api/product/${site}` : `/api/product/${site}/${values.slug}`,\n    // MUST CHANGE\n    method: !product ? \"post\" : \"put\",\n    body: {\n      title: values.title,\n      description: values.description,\n      brief: values.brief,\n      clickOptions: values.clickOptions.length > 0 ? values.clickOptions : [{\n        name: \"\"\n      }],\n      customerNote: values.customerNote\n    },\n    onSuccess: () => Router.push(`/user/${site}/services`)\n  });\n  useEffect(() => {\n    if (product) {\n      const {\n        title,\n        brief,\n        description,\n        slug,\n        clickOptions,\n        customerNote\n      } = product;\n      setValues(_objectSpread(_objectSpread({}, values), {}, {\n        updateExisting: true,\n        title,\n        slug,\n        brief,\n        description,\n        clickOptions,\n        customerNote\n      }));\n    }\n  }, []);\n\n  const handleChange = name => evt => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      [name]: evt.target.value\n    }));\n  };\n\n  const handleClickOptionsChange = idx => evt => {\n    const newClickOptions = values.clickOptions.map((o, sidx) => {\n      if (idx !== sidx) return o;\n      return _objectSpread(_objectSpread({}, o), {}, {\n        name: evt.target.value\n      });\n    });\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      clickOptions: newClickOptions\n    }));\n  };\n\n  const handleAddClickOption = () => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      clickOptions: values.clickOptions.concat([{\n        name: \"\"\n      }])\n    }));\n  };\n\n  const handleRemoveClickOption = idx => () => {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      clickOptions: values.clickOptions.filter((s, sidx) => idx !== sidx)\n    }));\n  };\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: true\n    }));\n    const res = await doRequest();\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: false\n    }));\n    console.log(res);\n  };\n\n  const formCard = () => {\n    const {\n      title,\n      brief,\n      description,\n      clickOptions,\n      loading,\n      emailBody,\n      emailSubject,\n      customerNote\n    } = values;\n    return /*#__PURE__*/_jsxs(Card, {\n      fluid: true,\n      children: [product ? /*#__PURE__*/_jsx(DeleteProduct, {\n        siteTitle: site,\n        productTitle: values.title\n      }) : null, /*#__PURE__*/_jsx(Card.Content, {\n        children: /*#__PURE__*/_jsxs(Form, {\n          loading: loading,\n          children: [/*#__PURE__*/_jsxs(Form.Field, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              children: \"Title\"\n            }), /*#__PURE__*/_jsx(Input, {\n              placeholder: \"title\",\n              onChange: handleChange(\"title\"),\n              className: \"form-control\",\n              value: title\n            })]\n          }), /*#__PURE__*/_jsxs(Form.Field, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              children: \"Brief Description\"\n            }), /*#__PURE__*/_jsx(Input, {\n              placeholder: \"brief\",\n              onChange: handleChange(\"brief\"),\n              className: \"form-control\",\n              value: brief\n            })]\n          }), /*#__PURE__*/_jsxs(Form.Field, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              children: \"Longer Description\"\n            }), /*#__PURE__*/_jsx(TextArea, {\n              placeholder: \"description\",\n              onChange: handleChange(\"description\"),\n              className: \"form-control\",\n              value: description\n            })]\n          }), /*#__PURE__*/_jsxs(Form.Field, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              children: \"Custom Note Instructions\"\n            }), /*#__PURE__*/_jsx(TextArea, {\n              placeholder: \"Describe additional information you'd like to receive from the customer ordering this service.\",\n              onChange: handleChange(\"customerNote\"),\n              className: \"form-control\",\n              value: customerNote\n            })]\n          }), clickOptions.map((o, idx) => /*#__PURE__*/_jsxs(Form.Field, {\n            children: [/*#__PURE__*/_jsx(\"label\", {\n              children: \"Checkbox Option\"\n            }), /*#__PURE__*/_jsx(TextArea, {\n              fluid: true,\n              className: \"form-control\",\n              type: \"text\",\n              placeholder: `Type checkbox option ${idx + 1}`,\n              value: o.name,\n              onChange: handleClickOptionsChange(idx)\n            }), /*#__PURE__*/_jsx(Button, {\n              size: \"mini\",\n              color: \"red\",\n              floated: \"right\",\n              type: \"button\",\n              onClick: handleRemoveClickOption(idx),\n              children: /*#__PURE__*/_jsx(\"p\", {\n                children: \"-\"\n              })\n            })]\n          })), /*#__PURE__*/_jsx(Button, {\n            size: \"mini\",\n            color: \"green\",\n            onClick: handleAddClickOption,\n            className: \"small\",\n            children: \"Add Clickable Option\"\n          })]\n        })\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"submit\",\n        fluid: true,\n        onClick: handleSubmit,\n        children: product ? \"Update\" : \"Create\"\n      })]\n    });\n  };\n\n  return /*#__PURE__*/_jsx(Segment, {\n    children: formCard()\n  });\n};\n\nexport default AddUpdateProduct;","map":null,"metadata":{},"sourceType":"module"}