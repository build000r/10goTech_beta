{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport { useRouter } from \"next/router\";\nimport { Footer } from \"../components/nav/Footer\";\nimport { SiteHeader } from \"../components/nav/SiteHeader\";\nimport { AdminHeader } from \"../components/nav/AdminHeader\";\nimport { buildClient } from \"../api/build-client\";\nimport { checkExistenceOfSite } from \"../hooks/use-site-existence\";\nimport NoSite from \"../components/error/site-does-not-exist\";\nimport { useEffect } from \"react\";\nimport * as gtag from \"../components/util/gtag\";\nimport Layout from \"../components/layouts\";\n\nfunction AppComponent({\n  Component,\n  pageProps,\n  user,\n  siteExists,\n  authUserIsAdmin\n}) {\n  const router = useRouter();\n  const isAdmin = router.pathname.includes(\"/admin/[site]\");\n  useEffect(() => {\n    const handleRouteChange = url => {\n      gtag.pageview(url);\n    };\n\n    router.events.on(\"routeChangeComplete\", handleRouteChange);\n    return () => {\n      router.events.off(\"routeChangeComplete\", handleRouteChange);\n    };\n  }, [router.events]);\n\n  const renderHeader = () => {\n    return isAdmin ? /*#__PURE__*/_jsx(AdminHeader, {\n      user: user,\n      siteExists: siteExists\n    }) : /*#__PURE__*/_jsx(SiteHeader, {\n      user: user,\n      siteExists: siteExists,\n      authUserIsAdmin: authUserIsAdmin\n    });\n  };\n\n  const renderComponent = () => /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps));\n\n  const layout = () => /*#__PURE__*/_jsxs(\"div\", {\n    children: [renderHeader(), /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps)), /*#__PURE__*/_jsx(Footer, {\n      siteType: isAdmin ? \"admin\" : \"user\"\n    })]\n  }); // mon 8:42 change\n  // return <Layout layout={layout()} children={layout}></Layout>;\n\n\n  return layout(); // return siteExists ? layout() : <NoSite />;\n}\n\nAppComponent.getInitialProps = async appContext => {\n  const {\n    siteExists,\n    siteInfo\n  } = await checkExistenceOfSite({\n    context: appContext.ctx\n  });\n\n  if (!siteExists) {\n    return {\n      siteExists\n    };\n  }\n\n  const client = buildClient(appContext.ctx);\n  const {\n    data: currentUser\n  } = await client.get(\"/api/users/currentuser\");\n  const user = currentUser.currentUser;\n  let pageProps = {};\n\n  if (appContext.Component.getInitialProps) {\n    pageProps = await appContext.Component.getInitialProps(appContext.ctx);\n  }\n\n  const authUserIsAdmin = user && user.id === siteInfo.ownerId;\n  let domainUrl;\n\n  if (appContext.ctx.req) {\n    domainUrl = appContext.ctx.req.headers.host;\n  }\n\n  return {\n    pageProps,\n    user,\n    siteExists,\n    siteInfo,\n    authUserIsAdmin,\n    domainUrl\n  };\n};\n\nexport default AppComponent;","map":null,"metadata":{},"sourceType":"module"}