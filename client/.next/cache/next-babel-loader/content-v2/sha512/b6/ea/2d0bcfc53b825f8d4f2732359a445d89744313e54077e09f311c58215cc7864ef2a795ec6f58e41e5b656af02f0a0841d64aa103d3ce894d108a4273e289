{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Link from \"next/link\";\nimport Router, { useRouter } from \"next/router\";\nimport { emptyCart } from \"../../hooks/cart-helpers\";\nimport { Card, Icon, Button, Header, Form, TextArea, Segment } from \"semantic-ui-react\";\nimport { useRequest } from \"../../hooks/use-request\";\n\nconst DeleteImage = ({\n  photoId,\n  path,\n  cb\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    loading: false\n  });\n  const {\n    loading\n  } = values;\n  const {\n    doRequest,\n    errors\n  } = useRequest({\n    url: `/api/photos/${photoId}`,\n    method: \"delete\",\n    body: {},\n    onSuccess: () => cb()\n  });\n\n  const handleClick = async e => {\n    e.preventDefault();\n    console.log(`deleting image ${photoId}`);\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: true\n    }));\n    await doRequest();\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      loading: false\n    }));\n  };\n\n  return /*#__PURE__*/_jsx(Button, {\n    floated: \"left\",\n    loading: loading,\n    negative: true,\n    fluid: true,\n    onClick: handleClick,\n    children: \"Delete Image\"\n  });\n};\n\nexport default DeleteImage;","map":null,"metadata":{},"sourceType":"module"}