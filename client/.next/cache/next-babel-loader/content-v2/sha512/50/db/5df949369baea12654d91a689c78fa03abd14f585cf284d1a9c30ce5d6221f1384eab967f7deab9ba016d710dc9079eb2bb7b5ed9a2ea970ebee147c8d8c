{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _defineProperty from \"/Users/rjb/Desktop/code/projects/rfp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport \"react-quill/dist/quill.snow.css\"; // ES6\n\nimport ReactQuill from \"react-quill\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nvar Editor = function Editor(_ref) {\n  var onBodyChange = _ref.onBodyChange,\n      oldBody = _ref.oldBody;\n\n  var _useState = useState({\n    editorHtml: oldBody || \"\"\n  }),\n      values = _useState[0],\n      setValues = _useState[1];\n\n  var editorHtml = values.editorHtml;\n\n  var handleChange = function handleChange(name) {\n    return function (e) {\n      setValues(_objectSpread(_objectSpread({}, values), {}, _defineProperty({}, name, e)));\n    };\n  };\n\n  useEffect(function () {\n    setValues(_objectSpread(_objectSpread({}, values), {}, {\n      editorHtml: oldBody\n    }));\n  }, [oldBody]);\n  return /*#__PURE__*/_jsxs(Fragment, {\n    children: [true ? /*#__PURE__*/_jsx(ReactQuill, {\n      style: {\n        minHeight: \"375px\"\n      },\n      theme: \"snow\",\n      onChange: handleChange(\"editorHtml\"),\n      value: editorHtml,\n      modules: {\n        toolbar: [[{\n          header: \"1\"\n        }, {\n          header: \"2\"\n        }, {\n          font: []\n        }], [{\n          size: []\n        }], [\"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\"], [{\n          list: \"ordered\"\n        }, {\n          list: \"bullet\"\n        }, {\n          indent: \"-1\"\n        }, {\n          indent: \"+1\"\n        }], [\"link\" //    \"image\", \"video\"\n        ], [\"clean\"]],\n        clipboard: {\n          // toggle to add extra line breaks when pasting HTML:\n          matchVisual: false\n        }\n      },\n      formats: [\"header\", \"font\", \"size\", \"bold\", \"italic\", \"underline\", \"strike\", \"blockquote\", \"list\", \"bullet\", \"indent\", \"link\" // \"image\",\n      // \"video\",\n      ],\n      bounds: \".app\",\n      placeholder: \"Enter an email here\"\n    }) : \"\", /*#__PURE__*/_jsx(Button, {\n      attached: \"bottom\",\n      onClick: function onClick() {\n        return onBodyChange(editorHtml);\n      },\n      children: \"Save Email Body\"\n    })]\n  });\n};\n\nexport default Editor;","map":null,"metadata":{},"sourceType":"module"}